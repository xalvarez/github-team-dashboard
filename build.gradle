plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.jetbrains.kotlin.kapt' version "$kotlinVersion"
    id 'org.jetbrains.kotlin.plugin.allopen' version "$kotlinVersion"
    id 'application'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'org.sonarqube' version "3.0"
    id 'jacoco'
}

repositories {
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/micronaut/core-releases-local'
    }
}

configurations {
    developmentOnly
}

allOpen {
    annotation('io.micronaut.aop.Around')
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation 'io.micronaut:micronaut-http-server-netty'
    implementation 'io.micronaut:micronaut-runtime'
    implementation 'io.micronaut:micronaut-views-thymeleaf'
    implementation 'io.micronaut:micronaut-http-client'
    implementation 'io.micronaut:micronaut-validation'

    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt 'io.micronaut:micronaut-inject-java'

    runtimeOnly 'org.thymeleaf:thymeleaf:3.0.11.RELEASE'
    runtimeOnly 'org.webjars:bootstrap:4.5.0'
    runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    runtimeOnly 'com.fasterxml.jackson.module:jackson-module-kotlin'

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest 'io.micronaut:micronaut-inject-java'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'io.micronaut.test:micronaut-test-junit5'
    testImplementation 'com.github.tomakehurst:wiremock:2.26.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.hamcrest:hamcrest:2.2'
}

application {
    mainClassName = 'com.github.xalvarez.githubteamdashboard.Application'
}

test.classpath += configurations.developmentOnly
run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

project.tasks["sonarqube"].dependsOn "jacocoTestReport"

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "com.github.xalvarez.githubteamdashboard.*")
    }
}

shadowJar {
    mergeServiceFiles()
}
